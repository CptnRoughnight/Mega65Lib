/****************************************************************/
/*	TRSE Mega65 StdLib											*/
/*	FCIO.TRU													*/	
/*																*/
/*	Procedures:													*/
/*																*/
/****************************************************************/
unit fcio;

@define NCM_TAG %00001000

@use "Mega65/system"
@use "Mega65/memory"

var
	const WIDTH_320 : byte = 0;
	const WIDTH_640 : byte = 1;
	const HEIGHT_200 : byte = 0;
	const HEIGHT_400 : byte = 1;
	
	isNCM : byte = 0;
	


/****************************************************************/
/*	fcio::InitFCM												*/
/*																*/
/*	width			- ScreenWidth (640/320)						*/
/*	height 			- ScreenHeight(400/200)						*/
/*																*/	
/****************************************************************/
Procedure InitFCM(width,height : integer);
begin
		if (width <= 360) then
		begin
			// H640=0
			system::HPIXEL_SCALE := 2;

		end else
		begin
			// H640=1
			system::HPIXEL_SCALE := 1;
		end;
		
		if (height <= 240) then
		begin
			// V400 = 0
			system::VPIXEL_SCALE := 2;
		end else
		begin
			// V400 = 1
			system::VPIXEL_SCALE := 1;
		end;
		// Calculate Screen Dimensions
		system::SCR_WIDTH := width;
		system::SCR_HEIGHT := height;
		
		system::LEFT_BORDER := (system::HORIZONTAL_CENTER - ((width * system::HPIXEL_SCALE) / 2));
		system::TOP_BORDER := (system::VERTICAL_CENTER - ((height * system::VPIXEL_SCALE) / 2));
		system::BOTTOM_BORDER := (system::VERTICAL_CENTER + ((height * system::VPIXEL_SCALE) / 2));
		
		system::TEXTYPOS := system::TOP_BORDER;
		system::MAXX := width / 8;
		system::MAXY := height / 8;

		asm ("
			sei
			lda #$35
			sta $01
			; Disable CIA Interrupts
			lda #$7f
			sta $dc0d
			sta $dd0d
					
		");
		system::Enable40Mhz;
		system::EnableVic4;
		system::DisableC65Rom;
		asm ("
			; Disable IRQ raster interrupts
			; because C65 uses raster interrupts in the ROM
			lda #$00
			sta $d01a
			
			; Change Vic2 Stuff here
			lda #%00000111
			trb $d016
			
			; exclude Kernel+Basic rom
			lda    $00
        		ora    #$07
        		sta    $00
			
			cli
			
			; Unmap C64 Roms $d030 by clearing bits 3-7
			lda #%11111000
			trb $d030
			cli
		
			lda #%00100000
			trb $d031
			
			");
			if (width<=360) then
			begin
				asm("
					; Disable H640
					lda #%10000000
					trb $d031
				");
			end else
			begin
				asm("
					; Enable H640
					lda #%10000000
					tsb $d031
				"); 
			end;
			
			if (height<=240) then
			begin
				asm("
					; Disable V400
					lda #%00001000
					trb $d031
					
				");
			end else
			begin
				asm("
					; Enable V400
					lda #$00
					sta $d05b

					lda #%00001000
					tsb $d031
					
				");
			end;
			
			asm("
			
					
			; Enable RAM palettes
			lda #$04
			tsb $d030
			
			; Turm on FCM mode and 16bit per char num
			lda #$05
			sta $d054
			
	    
    			;lda #%01000000
     		;trb $d051
      		
        		
			;lda #$1Dbyte
			;sta $01
		
			; enable fine raster compare
			lda #%10000111
      	    trb $d07a
			lda #%10000000
			trb $d053
			lda #$68
      	    sta $d079
		");
		asm("
			lda system_LEFT_BORDER
			sta $d05c
			lda #%00001111
			trb $d05d
			lda system_LEFT_BORDER+1&%00111111
			tsb $d05d	

			lda system_TOP_BORDER
			sta $d048
			lda #%00001111
			trb $d049
			lda system_TOP_BORDER+1&%00001111
			tsb $d049		
			lda system_BOTTOM_BORDER
			sta $d04a
			lda #%00001111
			trb $d04b
			lda system_BOTTOM_BORDER+1&%00001111
			tsb $d04b		
			lda system_LEFT_BORDER
			sta $d04c
			lda #%00001111
			trb $d04d
			lda system_LEFT_BORDER+1&%00001111
			tsb $d04d		
			lda system_TEXTYPOS
			sta $d04e
			lda #%00001111
			trb $d04f
			lda system_TEXTYPOS+1&%00001111
			tsb $d04f		
		");

		system::SetRowSize(system::MAXX);
		system::SetNumRows(system::MAXY);
end;


/****************************************************************/
/*	fcio::DisableFCIO											*/
/*																*/
/*  Restores state of VIC, disables FC/NCM Mode					*/
/*																*/	
/****************************************************************/


Procedure DisableFCIO;
begin
	asm("
		sei
		lda #$02
		sta $dc0d
		lda #$03
		sta $dd0d
		lda #255
		sta $0
		lda #133
		sta $1
		
		
		lda #$00
		sta $d07a
		sta $d053
		sta $d079
		sta $d049
		sta $d04d
		sta $d04f
		lda #100
		sta $d030
		
		
		lda #56
		sta $d01a
		lda #201
		sta $d016
		lda #224
		sta $d031
		lda #$01
		sta $d053
		sta $d04b
		lda #96
		sta $d054
		lda #80
		sta $d05c
		sta $d04c
		lda #192
		sta $d05d
		lda #104
		sta $d048
		sta $d04e
		lda #248
		sta $d04a
	
		cli
	");	
end;

/****************************************************************/
/*	fcio::Clearscreen											*/
/*																*/
/*	Clears the screen in FC/NCM mode								*/
/*																*/	
/****************************************************************/

Procedure ClearScreen;
begin
	// Clear Color Ram
	memory::Fill($ff08,$0000,system::MAXY*system::MAXX,0);
	// Clear Screen Ram
	memory::Fill(system::SCREEN_BANK,system::SCREEN_ADR,system::MAXY*system::MAXX,0);

end;
/****************************************************************/
/*	fcio::ToggleNCM											*/
/*																*/
/*	Warning : overrides Attrib ram							*/
/*																*/	
/****************************************************************/
Procedure ToggleNCM;
var 
	i : integer;
begin
	if isNCM=0 then
	begin
		isNCM := 1;
		system::MAXX := system::MAXX / 2;
		system::SetRowSize(system::MAXX);
		for i := 0 to system::MAXY*system::LogicalRowSize do
			memory::Poke32($0ff8,i*2,@NCM_TAG);				
	end else
	begin
		system::MAXX := system::MAXX * 2;
		system::SetRowSize(system::MAXX);
		isNCM := 0;
		memory::Fill($ff08,$0000,system::MAXY*system::LogicalRowSize,$0);
	end;
	
end;




/****************************************************************/
/*	fcio::PutChar											*/
/*																*/
/*	x 				- x position								*/
/*	y 				- y position								*/
/*  ch 				- char to print								*/
/*	c				- color									*/
/*																*/	
/****************************************************************/
Procedure PutChar(x,y,ch,c:byte);
begin
	memory::Poke32(system::SCREEN_BANK,system::SCREEN_ADR+x*2+y*system::LogicalRowSize,ch);
	memory::Poke32($ff8,1+x*2+y*system::LogicalRowSize,c);
end;

/****************************************************************/
/*	fcio::PutTile											*/
/*																*/
/*	x 				- x position								*/
/*	y 				- y position								*/
/*  t 				- char (integer) to print					*/
/*  pal				- pal index, only for ncm				*/
/*																*/	
/****************************************************************/
Procedure PutTile(x,y:byte;t : integer;pal:byte);
begin
	memory::WPoke32(system::SCREEN_BANK,system::SCREEN_ADR+x*2+y*system::LogicalRowSize,t);
	if (isNCM=1) then memory::Poke32($ff8,1+x*2+y*system::LogicalRowSize,pal shl 4);
end;




end.