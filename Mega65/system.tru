/****************************************************************/
/*	TRSE Mega65 StdLib											*/
/*	system.TRU													*/	
/*																*/
/*	Procedures:													*/
/*																*/
/*	Functions:													*/
/*		Enable40Mhz 		- Enable 40Mhz						*/
/*		EnableVic4  		- Enables Vic4 registers			*/
/*		DisableC65Rom 	- Disable C65 Rom						*/
/*																*/		
/****************************************************************/
unit system;

var
	SCREEN_BANK : byte = 0;
	SCREEN_ADR : integer = $0800;
	CHAR_BANK : byte = 0;
	CHAR_ADR : integer = 0;
	LogicalRowSize : integer;
	RowSize : byte;
	MAXX : byte = 80;
	MAXY : byte = 25;
	
	TOP_BORDER : integer;
	LEFT_BORDER : integer;
	BOTTOM_BORDER : integer;
	SCR_WIDTH : integer;
	SCR_HEIGHT : integer;
	
	HPIXEL_SCALE : integer;
	VPIXEL_SCALE : integer;
	
	TEXTYPOS : integer;

	const	HORIZONTAL_CENTER : integer = 400;
	const	VERTICAL_CENTER : integer = 304;			// change for NTSC to 242



/****************************************************************/
/*	system::Enable40Mhz											*/
/*																*/	
/*																*/
/****************************************************************/
procedure Enable40Mhz;
begin
		asm("
			lda #$41
			sta $00
		");
end;

/****************************************************************/
/*	system::EnableVic4											*/
/*																*/	
/*																*/
/****************************************************************/
procedure EnableVic4;
begin	
		asm("
			lda #$00
			tax
			tay
			taz
			map
			eom
			
			lda #$47
			sta $d02f
			lda #$53
			sta $d02f		
		");
end;

/****************************************************************/
/*	system::DisableC65Rom										*/
/*																*/	
/*																*/
/****************************************************************/
procedure DisableC65Rom;
begin
		asm ("
			lda #$70
			sta $d640
			eom		
		");
end;
	


/****************************************************************/
/*	system::ClearScreen											*/
/*																*/	
/*	back		- color background								*/
/*	border		- color border									*/
/*																*/ 
/****************************************************************/
procedure SetScreenBackground(back,border : byte);
begin
	asm("
		lda localVariable_system_SetScreenBackground_system_back
		sta $d020
		lda localVariable_system_SetScreenBackground_system_border
		sta $d021
	");	
end;


/****************************************************************/
/*	system::SetCharLocation										*/
/*																*/	
/*	b			- Bank of charset location						*/
/*	adr			- address of charset location					*/
/*																*/
/****************************************************************/
procedure SetCharLocation(b:byte;adr : integer);		
begin
	CHAR_BANK := b;
	CHAR_ADR := adr;
	asm("
		lda localVariable_system_SetCharLocation_system_adr
		sta 	$D068
		lda localVariable_system_SetCharLocation_system_adr+1
		sta $D069
		lda localVariable_system_SetCharLocation_system_b
		sta $D06A	
	");	
end;


/****************************************************************/
/*	system::SetScreenLocation									*/
/*																*/	
/*	b			- Bank of screen Location						*/
/*	adr			- address of screen Location					*/
/****************************************************************/
procedure SetScreenLocation(b:byte;adr : integer);
begin
	SCREEN_BANK := b;
	SCREEN_ADR := adr;
	asm("
		lda localVariable_system_SetScreenLocation_system_b
		sta $d062
		lda localVariable_system_SetScreenLocation_system_adr
		sta $d061
		lda localVariable_system_SetScreenLocation_system_adr+1
		sta $d060		
	");
end;


/****************************************************************/
/*	system::SetRowSize											*/
/*																*/
/*	newSize			- new row size in byte						*/
/*																*/	
/****************************************************************/
Procedure SetRowSize(newSize : integer);
begin
	RowSize := newSize & $ff;

	asm("
		lda system_RowSize
		sta $d05e
;		lda $d063
;		and #$cf
;		ora (system_RowSize+1 & $03) << 4
;		sta $d063	
		
		lda system_LogicalRowSize
		sta $d058
		lda system_LogicalRowSize+1
		sta $d059
	");
		LogicalRowSize := newSize*2;
end;


/****************************************************************/
/*	system::SetNumRows															*/
/*																						*/
/*	rows				- new num of rows											*/
/*																						*/	
/****************************************************************/
Procedure SetNumRows(rows : byte);
begin
	
	
	asm("
		lda localVariable_system_SetNumRows_system_rows
		sta $d07b
	");
end;

end.