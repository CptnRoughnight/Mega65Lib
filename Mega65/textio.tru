/****************************************************************/
/*	TRSE Mega65 StdLib											*/
/*	textio.TRU													*/	
/*																*/
/*	Procedures:													*/
/*		Set80x50 	- set 80x50 textmode						*/
/*		Set80x25		- set 80x25 textmode					*/
/*		Set40x25		- set 40x25 textmode					*/
/*		ClearScreen	- Clear screen with char and color			*/
/*		SetScreenLocation	- Set memory address of screen 		*/
/*		SetCharLocation	- Set memory address of chardata		*/
/*		SetScreenBackground 	- Set Background and Border color	*/
/*		PrintChar	- print char at location with color 		*/
/*		PrintString 	- print string at location with color 	*/
/*		SetFont		- set font 									*/
/*		ToggleLowerCase	- toggles between uppercase and lowercase 	*/
/*		CharDef		- replace a char with new data 				*/
/*		DrawWindow	- draws a window on the screen  				*/
/*		TranslateColors - translate color data to COLORS array indizes */
/*																*/		
/****************************************************************/
unit textio;

@use "Mega65/system"
@use "Mega65/memory"
@use "Mega65/math"

var
	const FONT_A : byte = 0;
	const FONT_B : byte = 1;
	const FONT_C : byte = 2;

	currentFont : byte = 0;

	isLowerCase : boolean = false;
	s : ^byte;		// pointer for strings
	s1,s2 : ^byte;
	splitCount : byte;		// index for splitstring
	splitChar : byte;			// delimiter char for splitstring
	@donotremove dummy
	dummy : byte;
	@donotremove str
	str : String = "     ";

/****************************************************************/
/*	textio::COLOR												*/
/*																*/	
/*																*/
/****************************************************************/
 COLORS : array[32] of byte = (
  0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
  64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,
);


/****************************************************************/
/*	textio::Set80x50											*/
/*																*/	
/*																*/
/****************************************************************/
procedure Set80x50;
begin
	system::MAXY := 50;
	system::SIZE := 50*80;
	asm("
		lda #%10000000
		tsb $d031
		
		lda #%00001000
		tsb $d031
		
		lda #50
		sta $d07b	
	");
end;

/****************************************************************/
/*	textio::Set80x25											*/
/*																*/	
/*																*/
/****************************************************************/
procedure Set80x25;
begin
	system::MAXY := 25;
	system::SIZE := 25*80;
	asm("
		lda #%10000000
		tsb $d031
		
		lda #%00001000
		trb $d031
		
		lda #25
		sta $d07b	
	");	
end;

/****************************************************************/
/*	textio::Set40x25											*/
/*																*/	
/*																*/
/****************************************************************/
procedure Set40x25;
begin
	system::MAXY := 25;
	system::MAXX := 40;
	system::SIZE := 25*40;
	asm("
		lda #%10000000
		trb $d031
		
		lda #%00001000
		trb $d031
		
		lda #25
		sta $d07b	
	");	
end;

/****************************************************************/
/*	textio::ClearScreen											*/
/*																*/	
/*	ch			- character to fill the screen 					*/
/*	c			- color to fill the screen 						*/
/*																*/
/****************************************************************/
procedure ClearScreen(ch,c : byte);
begin
	memory::Fill(system::SCREEN_BANK,system::SCREEN_ADR,system::SIZE,ch);
	memory::Fill($ff08,$0000,system::SIZE,c);
end;


/****************************************************************/
/*	inputs::ToScreen										*/
/*														*/
/*	c			- ascii code								*/				
/*																*/	
/*	returns		- screencode 								*/
/*																*/
/****************************************************************/
function ToScreen(c : byte) : byte;
var
	ret : byte;
begin
    ret := c;
    if (c >= 65 and (c <= 90)) then
    		ret := c - 65 + 1;
    	if (c >= 97 and (c <= 122)) then
    		ret := c - 97 + 1;
    		
    	ToScreen := ret;
end;

/****************************************************************/
/*	inputs::ToPetscii										*/
/*														*/
/*	c			- screen code								*/				
/*																*/	
/*	returns		- petsciicode 								*/
/*																*/
/****************************************************************/
function ToPetscii(c : byte) : byte;
begin
	
end;



/****************************************************************/
/*	textio::PrintChar											*/
/*																*/	
/*	x,y			- Screen position of char						*/
/*	ch			- char to print 								*/
/*  c			- color to print 								*/
/****************************************************************/
procedure PrintChar(ch,x,y,c : byte);
begin
	memory::Poke32(system::SCREEN_BANK,system::SCREEN_ADR+x+y*system::MAXX,ch);
	memory::Poke32($ff8,x+y*system::MAXX,c);
end;


/****************************************************************/
/*	textio::PrintString											*/
/*																*/	
/*	s			- pointer to string								*/
/*	x,y			- Screen position of string						*/
/*  c			- color to print 								*/
/****************************************************************/
procedure PrintString(s : global ^byte;x,y,c : byte);
var
	i : byte;
begin
	i := 0;
	while (s[i]<>0) do
	begin
		memory::Poke32(system::SCREEN_BANK,system::SCREEN_ADR+(x+i)+y*system::MAXX,ToScreen(s[i]));
		memory::Poke32($ff8,(x+i)+y*system::MAXX,c);
		inc(i);
	end;
end;



/****************************************************************/
/*	textio::PrintIntBin											*/
/*																*/	
/*	a			- integer value to print								*/
/*	x,y			- Screen position of string						*/
/*  c			- color to print 								*/
/****************************************************************/
procedure PrintIntBin(a : integer;x,y,c : byte);
var
	i : byte;
	dx : byte;
begin
	dx := 1;
	PrintChar('%',x,y,c);
	fori i := 15 to 0 step -1 do
	begin
		if (a & (1 shl i))<>0 then
			PrintChar('1',x+dx,y,c)
		else
			PrintChar('0',x+dx,y,c);
		inc(dx);
	end;
end;


/****************************************************************/
/*	textio::PrintByteHex										*/
/*															*/	
/*	a			- byte value to print						*/
/*	x,y			- Screen position of string					*/
/*  c			- color to print 							*/
/****************************************************************/
procedure PrintByteHex(a : byte;x,y,c : byte);
begin
	
	asm("	
		lda #<textio_str
		sta $fb
		lda #>textio_str
		sta $fc
		
		
		
		lda localVariable_textio_PrintByteHex_textio_a
		ldy #0		
		tax		; save value
		
		lsr
		lsr
		lsr
		lsr		; first the high nibble

		cmp #$a
		bcs @next1
				; if I'm here, carry is clear!
		adc #48
		jmp @next2
	@next1:
		clc
		adc #55
	@next2:
		sta ($fb),y
		iny 	

		
		txa		; restore value
		and #$0f	; second the low nibble
		cmp #$a
		bcs @next3
				; if I'm here, carry is clear!
		adc #48
		jmp @next4
	@next3:
		clc
		adc #55
	@next4:
		sta ($fb),y
		iny
				; null-terminate string
		iny
		lda #0 
		sta ($fb),y		
	@theend:
	
	");
	PrintString(#str,x,y,c);
end;


/****************************************************************/
/*	textio::PrintIntHex										*/
/*															*/	
/*	a			- integer value to print						*/
/*	x,y			- Screen position of string					*/
/*  c			- color to print 							*/
/****************************************************************/
procedure PrintIntHex(a : integer;x,y,c : byte);
begin
	PrintByteHex(hi(a),x,y,c);
	inc(x);
	inc(x);
	PrintByteHex(lo(a),x,y,c);
end;


/****************************************************************/
/*	textio::PrintLongHex										*/
/*															*/	
/*	a			- Long value to print						*/
/*	x,y			- Screen position of string					*/
/*  c			- color to print 							*/
/****************************************************************/
procedure PrintLongHex(a : long;x,y,c : byte);
begin
	asm("
		lda localVariable_textio_PrintLongHex_textio_a+2
		sta textio_dummy
	");
	PrintByteHex(dummy,x,y,c);
	asm("
		lda localVariable_textio_PrintLongHex_textio_a+1
		sta textio_dummy
		lda localVariable_textio_PrintLongHex_textio_x
		clc
		adc #2
		sta localVariable_textio_PrintLongHex_textio_x
	");
	PrintByteHex(dummy,x,y,c);
	asm("
		lda localVariable_textio_PrintLongHex_textio_a
		sta textio_dummy
		lda localVariable_textio_PrintLongHex_textio_x
		clc
		adc #2
		sta localVariable_textio_PrintLongHex_textio_x
	");
	PrintByteHex(dummy,x,y,c);
end;




/****************************************************************/
/*	textio::PrintByteBin											*/
/*																*/	
/*	a			- integer value to print								*/
/*	x,y			- Screen position of string						*/
/*  c			- color to print 								*/
/****************************************************************/
procedure PrintByteBin(a : byte;x,y,c : byte);
var
	i : byte;
	dx : byte;
begin
	dx := 1;
	PrintChar(x,y,'%',c);
	fori i := 7 to 0 step -1 do
	begin
		if (a & (1 shl i))<>0 then
			PrintChar('1',x+dx,y,c)
		else
			PrintChar('0',x+dx,y,c);
		inc(dx);
	end;
end;



/****************************************************************/
/*	textio::PrintStringHex									*/
/*																*/	
/*	s			- pointer to string								*/
/*	x,y			- Screen position of string						*/
/*  c			- color to print 								*/
/****************************************************************/
procedure PrintStringHex(s : global ^byte;x,y,c : byte);
var
	i : byte;
	dx : byte;
begin
	i := 0;
	dx := 0;
	while (s[i]<>0) do
	begin
		PrintByteHex(s[i],x+dx,y,c);	
		inc(i);
		dx := dx + 3;		
	end;
end;



/****************************************************************/
/*	textio::PrintByte											*/
/*																*/	
/*	b			- byte to print								*/
/*	x,y			- Screen position of string						*/
/*  c			- color to print 								*/
/****************************************************************/
procedure PrintByte(b : byte;x,y,c : byte);
var
	temp : byte;
	i : byte;
	k,j : byte;
begin
	if b=0 then
	begin
		PrintChar('0',x,y,c);
		return;
	end;
	temp := b;
	k := 1;
	j := 0;
	if b>9 then k:=2;
	if b>99 then k:=3;
	while (temp > 0) do
	begin
		i := mod(temp,10);
		PrintChar(i+48,x+k-j,y,c);
		temp := math::Div8x8(temp,10);
		inc(j);
	end;	
end;


/****************************************************************/
/*	textio::SetFont												*/
/*																*/	
/*	font		- font nr										*/
/****************************************************************/
procedure SetFont(font : byte);
begin
	case font of
		FONT_A : memory::Copy($0002,$9000,system::CHAR_BANK,system::CHAR_ADR,4096);			
		FONT_B : memory::Copy($0003,$D000,system::CHAR_BANK,system::CHAR_ADR,4096);
		FONT_C : memory::Copy($0002,$D000,system::CHAR_BANK,system::CHAR_ADR,4096);	
	end;
	currentFont := font;
end;


/****************************************************************/
/*	textio::ToggleLowerCase										*/
/*																*/	
/****************************************************************/
procedure ToggleLowerCase;
var 
	d : integer;
begin
	if isLowerCase then
		d := $000
	else
		d := $800;
	
	case currentFont of
		FONT_A : memory::Copy($0002,$9000+d,system::CHAR_BANK,system::CHAR_ADR,4096);			
		FONT_B : memory::Copy($0003,$D000+d,system::CHAR_BANK,system::CHAR_ADR,4096);
		FONT_C : memory::Copy($0002,$D000+d,system::CHAR_BANK,system::CHAR_ADR,4096);	
	end;
end;

/****************************************************************/
/*	textio::CharDef												*/
/*																*/
/*	charNum			- char num to replace						*/
/*	data 			- pointer to array of 8 byte -> chardata	*/
/*																*/	
/****************************************************************/
procedure CharDef(charNum : byte;data : ^integer);
begin
	memory::Copy($0000,data,system::CHAR_BANK,system::CHAR_ADR+charNum*8,8);
end;



/****************************************************************/
/*	textio::DrawWindow											*/
/*																*/
/*	x,y				- position of the window					*/
/*	x2,y2			- end position of the window						*/
/*	bc				- color of the border					*/
/*	fch				- fill char								*/
/*  fc				- fill color								*/
/*																*/	
/****************************************************************/
procedure DrawWindow(x,y,x2,y2 : byte;bc,fch,fc : byte);
var
	ix,iy : byte;
begin
	// draw the 4 corners
	PrintChar(x,y,85,bc);
	PrintChar(x2,y,73,bc);
	PrintChar(x2,y2,75,bc);
	PrintChar(x,y2,74,bc);
	// draw the lines
	memory::Fill(system::SCREEN_BANK,system::SCREEN_ADR+x+1+y*system::MAXX,(x2-x-1),67);
	memory::Fill($ff08,$0000+x+1+y*system::MAXX,(x2-x-1),bc);

	memory::Fill(system::SCREEN_BANK,system::SCREEN_ADR+x+1+y2*system::MAXX,(x2-x-1),67);
	memory::Fill($ff08,$0000+x+1+y2*system::MAXX,(x2-x-1),bc);

	for iy := y+1 to y2 do 
	begin
		PrintChar(x,iy,66,bc);
		PrintChar(x2,iy,66,bc);		
		memory::Fill(system::SCREEN_BANK,system::SCREEN_ADR+x+1+iy*system::MAXX,(x2-x-1),fch);
		memory::Fill($ff08,$0000+x+1+iy*system::MAXX,(x2-x-1),fc);
	end;
end;




/****************************************************************/
/*	textio::StrEqual																*/
/*																						*/
/*	s1			- 	Input String 1													*/
/*	s2			- 	Input String 2													*/
/*																						*/	
/* return	-	returns 1 of s1 = s2, otherwise 0						*/
/****************************************************************/
function StrEqual(s1,s2 : global ^byte) : byte;
var 
	ret : byte;
	index : byte;
begin
	ret := 1;
	index := 0;
	for index := 0 to 255 do
	begin
		if (s1[index]=0 and (s2[index]=0)) then break;
		if ((s1[index]<>s2[index])) then 
		begin
			ret := 0;
			break;
		end;
	end;
	StrEqual:=ret;
end;



/****************************************************************/
/*	textio::StrSplit																*/
/*																						*/
/*	s1			- 	Input String 1													*/
/* s2			-	destination String											*/
/*	c			- 	delimiter														*/
/*																						*/	
/* return	-	split string #0 in s2										*/
/****************************************************************/
procedure StrSplit(s1,s2 : global ^byte,c : byte) ;
var 
	index : byte;
begin
	index := 0;
	splitCount := 0;
	splitChar := c;
	
	while(s1[splitCount]<>0 and (s1[splitCount]<>c)) do
	begin
		s2[index] := splitCount;
		inc(index);
		inc(splitCount);
	end;	
end;



/****************************************************************/
/*	textio::StrGetNext															*/
/*																						*/
/*																						*/	
/* return	-	split string #n in s2										*/
/****************************************************************/
procedure StrGetNext() ;
var 
	index : byte;
begin
	index := 0;
	while(s1[splitCount]<>0 and (s1[splitCount]<>splitChar)) do
	begin
		s2[index] := splitCount;
		inc(index);
		inc(splitCount);
	end;	
end;


/*******************************************************************/
/*	textio::TranslateColors										*/
/*																*/
/*																*/	
/*	scradrhi		- high word of address 							*/
/*	scradrlo		- low word of address 							*/
/*	count		- how many colors to convert						*/
/*																*/
/*	converts 0..31 color indizes to indizes defined in COLORS-Array */
/*																*/
/*******************************************************************/
procedure TranslateColors(srcadrhi,srcadrlo : integer;count : byte);
var
	i : integer;
	c : byte;
	addr : integer;
begin
	for i := 0 to count do
	begin
		addr := srcadrlo+i;
		c := COLORS[memory::Peek32(srcadrhi,addr)];
		memory::Poke32(srcadrhi,addr,c);		
	end;
end;

end.