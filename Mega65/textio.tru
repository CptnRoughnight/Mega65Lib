/****************************************************************/
/*	TRSE Mega65 StdLib											*/
/*	textio.TRU													*/	
/*																*/
/*	Procedures:													*/
/*		Set80x50 	- set 80x50 textmode						*/
/*		Set80x25		- set 80x25 textmode					*/
/*		Set40x25		- set 40x25 textmode					*/
/*		ClearScreen	- Clear screen with char and color			*/
/*		SetScreenLocation	- Set memory address of screen 		*/
/*		SetCharLocation	- Set memory address of chardata		*/
/*		SetScreenBackground 	- Set Background and Border color	*/
/*		PrintChar	- print char at location with color 		*/
/*		PrintString 	- print string at location with color 	*/
/*		SetFont		- set font 									*/
/*		ToggleLowerCase	- toggles between uppercase and lowercase 	*/
/*		CharDef		- replace a char with new data 				*/
/*																*/		
/****************************************************************/
unit textio;

@use "Mega65/system"
@use "Mega65/memory"

var
	const FONT_A : byte = 0;
	const FONT_B : byte = 1;
	const FONT_C : byte = 2;

	currentFont : byte = 0;

	isLowerCase : boolean = false;
	s : ^byte;		// pointer for strings


/****************************************************************/
/*	textio::COLOR												*/
/*																*/	
/*																*/
/****************************************************************/
 COLORS : array[32] of byte = (
  0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
  64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,
);


/****************************************************************/
/*	textio::Set80x50											*/
/*																*/	
/*																*/
/****************************************************************/
procedure Set80x50;
begin
	system::MAXY := 50;
	asm("
		lda #%10000000
		tsb $d031
		
		lda #%00001000
		tsb $d031
		
		lda #50
		sta $d07b	
	");
end;

/****************************************************************/
/*	textio::Set80x25											*/
/*																*/	
/*																*/
/****************************************************************/
procedure Set80x25;
begin
	system::MAXY := 25;
	asm("
		lda #%10000000
		tsb $d031
		
		lda #%00001000
		trb $d031
		
		lda #25
		sta $d07b	
	");	
end;

/****************************************************************/
/*	textio::Set40x25											*/
/*																*/	
/*																*/
/****************************************************************/
procedure Set40x25;
begin
	system::MAXY := 25;
	system::MAXX := 40;
	asm("
		lda #%10000000
		trb $d031
		
		lda #%00001000
		trb $d031
		
		lda #25
		sta $d07b	
	");	
end;

/****************************************************************/
/*	textio::ClearScreen											*/
/*																*/	
/*	ch			- character to fill the screen 					*/
/*	c			- color to fill the screen 						*/
/*																*/
/****************************************************************/
procedure ClearScreen(ch,c : byte);
begin
	memory::Fill(system::SCREEN_BANK,system::SCREEN_ADR,system::MAXX*system::MAXY,ch);
	memory::Fill($ff08,$0000,system::MAXX*system::MAXY,c);
end;



/****************************************************************/
/*	textio::PrintChar											*/
/*																*/	
/*	x,y			- Screen position of char						*/
/*	ch			- char to print 								*/
/*  c			- color to print 								*/
/****************************************************************/
procedure PrintChar(x,y,ch,c : byte);
begin
	memory::Poke32(system::SCREEN_BANK,system::SCREEN_ADR+x+y*system::MAXX,ch);
	memory::Poke32($ff8,x+y*system::MAXX,c);
end;


/****************************************************************/
/*	textio::PrintString											*/
/*																*/	
/*	s			- pointer to string								*/
/*	x,y			- Screen position of string						*/
/*  c			- color to print 								*/
/****************************************************************/
procedure PrintString(s : global ^byte;x,y,c : byte);
var
	i : byte;
begin
	i := 0;
	while (s[i]<>0) do
	begin
		memory::Poke32(system::SCREEN_BANK,system::SCREEN_ADR+(x+i)+y*system::MAXX,s[i]);
		memory::Poke32($ff8,(x+i)+y*system::MAXX,c);
		inc(i);
	end;
end;

/****************************************************************/
/*	textio::SetFont												*/
/*																*/	
/*	font		- font nr										*/
/****************************************************************/
procedure SetFont(font : byte);
begin
	case font of
		FONT_A : memory::Copy($0002,$9000,system::CHAR_BANK,system::CHAR_ADR,4096);			
		FONT_B : memory::Copy($0003,$D000,system::CHAR_BANK,system::CHAR_ADR,4096);
		FONT_C : memory::Copy($0002,$D000,system::CHAR_BANK,system::CHAR_ADR,4096);	
	end;
	currentFont := font;
end;


/****************************************************************/
/*	textio::ToggleLowerCase										*/
/*																*/	
/****************************************************************/
procedure ToggleLowerCase;
var 
	d : integer;
begin
	if isLowerCase then
		d := $000
	else
		d := $800;
	
	case currentFont of
		FONT_A : memory::Copy($0002,$9000+d,system::CHAR_BANK,system::CHAR_ADR,4096);			
		FONT_B : memory::Copy($0003,$D000+d,system::CHAR_BANK,system::CHAR_ADR,4096);
		FONT_C : memory::Copy($0002,$D000+d,system::CHAR_BANK,system::CHAR_ADR,4096);	
	end;
end;

/****************************************************************/
/*	textio::CharDef												*/
/*																*/
/*	charNum			- char num to replace						*/
/*	data 			- pointer to array of 8 byte -> chardata	*/
/*																*/	
/****************************************************************/
procedure CharDef(charNum : byte;data : ^integer);
begin
	memory::Copy($0000,data,system::CHAR_BANK,system::CHAR_ADR+charNum*8,8);
end;

end.